#!/bin/bash

# TODO: Change the green to a lighter one and make it bold
# TODO: Rename the file because it will take care of updating an existing mac as well as setting up a new one

# Global Variables
CYAN="\033[36m"
BLUE="\033[34m"
GREEN="\033[32m"
RED="\033[31m"
YELLOW="\033[33m"
ENDCOLOR="\033[m"

BOLD=$(tput bold)
NORMAL=$(tput sgr0)


function installHomebrew() {
    echo "================================================================="
    echo -e "$GREEN ${BOLD}STEP 1: Install Homebrew (OSX package manager) $ENDCOLOR ${NORMAL}"
    echo "================================================================="

    ################################################
    # First check if homebrew is installed
    ################################################
    which -s brew
    if [[ $? != 0 ]] ; then
        # Install brew (taken from http://brew.sh/)
        echo -e "$BLUE INFO $ENDCOLOR Installing.."
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    else
        # brew is already installed
        echo -e "$BLUE INFO $ENDCOLOR found existing installation.."
#        brew update
    fi

    echo " "

    ################################################
    # Install or update brew formulae
    ################################################
    echo "================================================================="
    echo -e "$GREEN ${BOLD}STEP 2: Install homebrew formulae $ENDCOLOR ${NORMAL}"
    echo "================================================================="

    brew_formulae="python postgresql sqlite subversion wget scala node maven docker percol apr apr-util htop-osx gradle"
    for formula in $brew_formulae; do
        echo -e "$BLUE FORMULA: $ENDCOLOR ${BOLD} $formula ${NORMAL}"

        if ! brew info $formula &>/dev/null; then
            # The formula is not installed
            brew install $formula
        else
            # The formula is installed, let's see if there's an upgrade
            echo -e "$RED $formula $ENDCOLOR is already installed"
#            brew upgrade $formula
        fi

        echo ""
    done
}

function installPipPackages() {
    echo ""
    echo "================================================================="
    echo -e "$GREEN ${BOLD}STEP 3: Install pip (python package manager) $ENDCOLOR ${NORMAL}"
    echo "================================================================="

    # Homebrew will install pip for you, but just in case, let's add a fail safe check
    which -s pip
    if [[ $? != 0 ]] ; then
        echo -e "pip is not installed"
        #easy_install pip >> Homebrew install pip for you, so we don't need to install it
    else
        echo -e "pip is installed, let's see if there's an update.."
        pip install --upgrade pip
    fi

    echo ""
    echo "================================================================="
    echo -e "$GREEN ${BOLD}STEP 4: Install pip packages $ENDCOLOR ${NORMAL}"
    echo "================================================================="

    pip_packages="wheel setuptools awscli httpie pipdeptree virtualenv virtualenvwrapper"
    for package in $pip_packages; do
        echo -e "$BLUE PACKAGE: $ENDCOLOR ${BOLD} $package ${NORMAL}"
        if ! pip show $package &>/dev/null; then
            # The package is not installed, install it
            pip install $package
        else
            # The package is installed, let's see if we can upgrade it
            echo -e "$RED $package $ENDCOLOR is already installed"
#            pip install --upgrade $package
        fi
        echo ""
    done
    echo ""
}

function createDevelopmentEnvironmentDirectoryStructure() {
    echo ""
    echo "================================================================="
    echo -e "$GREEN ${BOLD}STEP 5: Create Development Environment Structure $ENDCOLOR ${NORMAL}"
    echo "================================================================="
    echo ""

    # Root development project's directory
    devHome=$HOME/Development

    ##########################################
    # 8Bit Ghost's project's directory
    ##########################################
    # This directory contains 8bitghost client projects
    freelanceHome=$devHome/clients
    projectDirectoryHelper $freelanceHome "8bitGhost's client project's home"
    echo ""

    ##########################################
    # Personal project's directory
    ##########################################
    personalHome=$devHome/personal
    projectDirectoryHelper $personalHome "personal project's home"
    projectSubdirectoryHelper $personalHome "lab projects"
    projectSubdirectoryHelper $personalHome/lab "academic games github other web"
    projectSubdirectoryHelper $personalHome/projects "career 8bitghost"
    echo ""

    ##########################################
    # Hobsons directories
    ##########################################
    hobsonsHome=$devHome/hobsons
    projectDirectoryHelper $hobsonsHome "hobsons' project's home"
    projectSubdirectoryHelper $hobsonsHome "lab starfish"
    projectSubdirectoryHelper $hobsonsHome/starfish "core internal mobile"
    projectSubdirectoryHelper $hobsonsHome/starfish/core "DEV OPS RC"
    echo ""
}

function projectDirectoryHelper() {
    if [ ! "$1" ]; then
        echo -e "[$RED ${BOLD}ERROR$ENDCOLOR ${NORMAL}] Unable to create directory structure (invalid function usage): missing parent directory"
        exit 1;
    fi

    if [ ! "$2" ]; then
        echo -e "[$RED ${BOLD}ERROR$ENDCOLOR ${NORMAL}] Unable to create directory structure (invalid function usage): missing directory short name description"
        exit 1;
    fi

    dir=$1
    shortNameDesc=$2

    if [ ! -d "$dir" ]; then
        mkdir -p $dir
        echo -e "[$GREEN ${BOLD}INFO${NORMAL} $ENDCOLOR] ${BOLD}Creating $shortNameDesc directory: $BLUE $dir $ENDCOLOR ${NORMAL}"
    else
        echo -e "[$YELLOW ${BOLD}IGNORE${NORMAL} $ENDCOLOR] ${BOLD}$shortNameDesc directory already exists: $BLUE $dir $ENDCOLOR ${NORMAL}"
    fi
}

function projectSubdirectoryHelper() {
    # Verify all the required parameters are passed in
    if [ ! "$1" ]; then
        echo -e "[$RED ${BOLD}ERROR$ENDCOLOR ${NORMAL}] Unable to create directory structure (invalid function usage): missing parent directory"
         exit 1;
    fi

    if [ ! "$2" ]; then
        echo -e "[$RED ${BOLD}ERROR$ENDCOLOR ${NORMAL}] Unable to create directory structure (invalid function usage): missing child directories list"
         exit 1;
    fi

    parentDirectory=$1
    childDirList=$2

    for currDir in $childDirList; do
        currPath=$parentDirectory/$currDir
        if [ ! -d "$currPath" ]; then
            mkdir -p $currPath
            echo -e "[$GREEN ${BOLD}INFO$ENDCOLOR ${NORMAL}] Creating directory: $BLUE $currPath $ENDCOLOR"
        else
            echo -e "[$YELLOW ${BOLD}IGNORE$ENDCOLOR ${NORMAL}] Directory already exists: $BLUE $currPath $ENDCOLOR"
        fi
    done
}

function runDotfilesInstall() {
    echo ""
    echo "================================================================="
    echo -e "$GREEN ${BOLD}STEP 6: Install dotfiles $ENDCOLOR ${NORMAL}"
    echo "================================================================="
    echo ""
    dotfiles_install
    echo ""
}

function setOSXDefaults() {
    echo ""
    echo "================================================================="
    echo -e "$GREEN ${BOLD}STEP 7: Overwrite OS X default settings $ENDCOLOR ${NORMAL}"
    echo "================================================================="
    echo ""
    set_osx_defaults
    echo ""
}

# =======================================================================
# Script begins here, using the helper functions above
# =======================================================================
installHomebrew
installPipPackages
createDevelopmentEnvironmentDirectoryStructure
runDotfilesInstall
setOSXDefaults
echo ""
echo "================================================================="

echo -e "[$GREEN END $ENDCOLOR] Your Mac is setup and ready to use."