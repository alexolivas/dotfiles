#!/bin/bash

# TODO: Change the green to a lighter one and make it bold
# TODO: Rename the file because it will take care of updating an existing mac as well as setting up a new one

# Global Variables
CYAN="\033[36m"
BLUE="\033[34m"
GREEN="\033[32m"
RED="\033[31m"
ENDCOLOR="\033[m"

BOLD=$(tput bold)
NORMAL=$(tput sgr0)


function installHomebrew() {
    echo "================================================================="
    echo -e "$GREEN ${BOLD}STEP 1: Install Homebrew (OSX package manager) $ENDCOLOR ${NORMAL}"
    echo "================================================================="

    ################################################
    # First check if homebrew is installed
    ################################################
    which -s brew
    if [[ $? != 0 ]] ; then
        # Install brew (taken from http://brew.sh/)
        echo -e "$BLUE INFO $ENDCOLOR Installing.."
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    else
        # brew is already installed
        echo -e "$BLUE INFO $ENDCOLOR found existing installation.."
#        brew update
    fi

    echo " "

    ################################################
    # Install or update brew formulae
    ################################################
    echo "================================================================="
    echo -e "$GREEN ${BOLD}STEP 2: Install homebrew formulae $ENDCOLOR ${NORMAL}"
    echo "================================================================="

    brew_formulae="python postgresql sqlite subversion wget scala node maven docker percol apr apr-util htop-osx gradle"
    for formula in $brew_formulae; do
        echo -e "$BLUE FORMULA: $ENDCOLOR ${BOLD} $formula ${NORMAL}"

        if ! brew info $formula &>/dev/null; then
            # The formula is not installed
            brew install $formula
        else
            # The formula is installed, let's see if there's an upgrade
            echo -e "$RED $formula $ENDCOLOR is already installed"
#            brew upgrade $formula
        fi

        echo ""
    done
}

function installPipPackages() {
    echo ""
    echo "================================================================="
    echo -e "$GREEN ${BOLD}STEP 3: Install pip (python package manager) $ENDCOLOR ${NORMAL}"
    echo "================================================================="

    # Homebrew will install pip for you, but just in case, let's add a fail safe check
    which -s pip
    if [[ $? != 0 ]] ; then
        echo -e "pip is not installed"
        #easy_install pip >> Homebrew install pip for you, so we don't need to install it
    else
        echo -e "pip is installed, let's see if there's an update.."
        pip install --upgrade pip
    fi

    echo ""
    echo "================================================================="
    echo -e "$GREEN ${BOLD}STEP 4: Install pip packages $ENDCOLOR ${NORMAL}"
    echo "================================================================="

    pip_packages="wheel setuptools awscli httpie pipdeptree virtualenv virtualenvwrapper"
    for package in $pip_packages; do
        echo -e "$BLUE PACKAGE: $ENDCOLOR ${BOLD} $package ${NORMAL}"
        if ! pip show $package &>/dev/null; then
            # The package is not installed, install it
            pip install $package
        else
            # The package is installed, let's see if we can upgrade it
            echo -e "$RED $package $ENDCOLOR is already installed"
#            pip install --upgrade $package
        fi
        echo ""
    done
    echo ""
}

function createDevelopmentEnvironmentDirectory() {
    echo ""
    echo "================================================================="
    echo -e "$GREEN ${BOLD}STEP 5: Create Development Environment Directory $ENDCOLOR ${NORMAL}"
    echo "================================================================="
    echo ""

    # Root development project's directory
    devHome=$HOME/Development/
    echo -e "Creating development home directory: $GREEN ${BOLD} $devHome $ENDCOLOR ${NORMAL}"
    mkdir -p $devHome

    ##########################################
    # Hobsons directories
    ##########################################
    hobsonsHome=$devHome/Hobsons
    echo -e "[$BLUE${BOLD} INFO $ENDCOLOR${NORMAL}] Creating directory for Hobsons' projects.."

    # TODO: FIX THIS!!!! It's failing here with permission denied:  mkdir: /Lab: Permission denied
    hobsonsLab=$hobsonHome/Lab
    echo -e "[$GREEN${BOLD} CREATED $ENDCOLOR${NORMAL}] $hobsonsLab"
    mkdir -p $hobsonsLab
#    echo -e "Creating Hobsons projects directory: $BLUE ${BOLD} $hobsonsHome $ENDCOLOR ${NORMAL}"

#    starfishHome=$hobsonsHome/starfish
#    starfishMobile=$starfishHome/mobile
#    starfishCore=$starfishHome/core
#    starfishInternal=$starfishHome/internal
#
#    mkdir -p $starfishHome
#    mkdir -p $starfishMobile
#    mkdir -p $starfishCore
#    mkdir -p $starfishInternal

    ##########################################
    # Personal project's directory
    ##########################################
    personalHome=$devHome/Personal
    echo -e "[$BLUE${BOLD} INFO $ENDCOLOR${NORMAL}] Creating directory for personal projects.."

    ##########################################
    # 8Bit Ghost's project's directory
    ##########################################
    freelanceHome=$devHome/8bitghost
    echo -e "[$BLUE${BOLD} INFO $ENDCOLOR${NORMAL}] Creating directory for 8Bit Ghost projects.."


}

function createDotfiles() {
    echo ""
    echo "================================================================="
    echo -e "$GREEN ${BOLD}STEP 6: Create computer's dotfiles $ENDCOLOR ${NORMAL}"
    echo "================================================================="
    echo ""
    update_dotfiles
    echo ""
}

# =======================================================================
# Script begins here, using the helper functions above
# =======================================================================
installHomebrew
installPipPackages
createDevelopmentEnvironmentDirectory
createDotfiles
echo ""
echo ""
echo "================================================================="

echo -e "[$GREEN END $ENDCOLOR] Your Mac is setup and ready to use."